###############
# Eskomsepush #
###############

rest:
  - resource: "https://developer.sepush.co.za/business/2.0/area"
    scan_interval: '01:00:00' # RATE LIMIT!
    headers:
      Token: **token**
    params:
      id: **area**
    sensor:
      - name: EskomSePush
        force_update: true
        value_template: "OK"
        json_attributes:
          - events
          - info
          - schedule
  - resource: "https://developer.sepush.co.za/business/2.0/status"
    scan_interval: '01:00:00' # RATE LIMIT!
    headers:
      Token: XOyYgJ3megkxXwUcMD4q
    sensor:
      - name: Eskom Loadshedding stage
        force_update: true
        value_template: "OK"
        json_attributes:
          - status

sensor:
  - platform: rest
    name: EskomSePushAllowance
    resource: "https://developer.sepush.co.za/business/2.0/api_allowance"
    headers:
      Token: XOyYgJ3megkxXwUcMD4q
    json_attributes_path: "$.allowance"
    json_attributes:
      - count
      - limit
      - type
    value_template: "OK"
    scan_interval: 3600

# template sensors abased on ESP above
  - platform: template
    sensors:
      eskomsepush_stage:
        friendly_name: Loadshedding stage
        unique_id: EskomSePush_stage
        value_template: "{{ state_attr('sensor.eskom_loadshedding_stage','status').eskom.stage}}"
      next_loadshedding_time:
        friendly_name: Next loadshedding time
        device_class: timestamp
        unique_id: Next_Loadshedding_Time
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
                {%if (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].start }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].start }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{ state_attr('sensor.eskomsepush','events')[1].start }}
                {%else%}
                Unknown
                {%endif%}
            {%else%}
            Unknown
            {%endif%}
      next_loadshedding_event:
        friendly_name: Next loadshedding event
        unique_id: Next_Loadshedding_Event
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
                {%if (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].note }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].note }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{ state_attr('sensor.eskomsepush','events')[1].note }}
                {%else%}
                None
                {%endif%}
            {%else%}
            Suspended
            {%endif%}
      next_loadshedding_time_end:
        friendly_name: Next loadshedding end time
        unique_id: Next_Loadshedding_End_Time
        device_class: timestamp
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
                {%if (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].end }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) < as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{state_attr('sensor.eskomsepush','events')[0].end }}
                {%elif (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].start)) and (as_timestamp(now()) > as_timestamp(state_attr('sensor.eskomsepush','events')[0].end)) %}
                {{ state_attr('sensor.eskomsepush','events')[1].end }}
                {%else%}
                Unknown
                {%endif%}
            {%else%}
            Unknown
            {%endif%}
      next_loadshedding_duration:
        friendly_name: Next loadshedding duration
        unique_id: Next_Loadshedding_Duration
        unit_of_measurement: mins
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
            {{ (as_timestamp(states("sensor.next_loadshedding_time_end")) - as_timestamp(states("sensor.next_loadshedding_time"))) / 60 }}'
            {%else%}
            Unknown
            {%endif%}
      time_till_loadshedding:
        friendly_name: Time until next loadshedding
        unique_id: Time_Until_Next_Loadshedding
        unit_of_measurement: mins
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
            {{ [( as_timestamp(states.sensor.next_loadshedding_time.state) | int - as_timestamp(now()) | int ) / 60,-1] | max }}
            {%else%}
            Unknown
            {%endif%}
      time_till_loadshedding_ends:
        friendly_name: Time until next loadshedding ends
        unique_id: Time_Until_Next_Loadshedding_ends
        unit_of_measurement: mins
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
            {{ [( as_timestamp(states.sensor.next_loadshedding_time_end.state) | int - as_timestamp(now()) | int ) / 60,-1] | max }}
            {%else%}
            Unknown
            {%endif%}
      eskomsepush_calls_remaining:
        friendly_name: EskomSePush API Calls remaining
        unique_id: EskomSePush_calls_remaining
        value_template: '{{ int(state_attr("sensor.eskomsepushallowance","limit")) - int(state_attr("sensor.eskomsepushallowance","count")) }}'
      loadshedding_slot_forecast:
        friendly_name: Loadshedding slot forecast
        unique_id: loadshedding_slot_forecast
        value_template: >
          {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
          {%- for event in states['sensor.eskomsepush'].attributes.events -%} {{
          as_timestamp(event['start']) | timestamp_custom('%a %d %b:') }} {{ event['note'] }} {{
          as_timestamp(event['start']) | timestamp_custom('from %H:%M') }} to {{
          as_timestamp(event['end']) | timestamp_custom('%H:%M') }}
          {{- '\n' -}} {%- endfor -%}
          {%else%}
          None scheduled
          {%endif%}
      loadshedding_stage_forecast:
        friendly_name: Loadshedding stage forecast
        unique_id: loadshedding_stage_forecast
        value_template: >
          {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
          {%- for event in states['sensor.eskom_loadshedding_stage'].attributes.status.eskom.next_stages -%} {{
          as_timestamp(event['stage_start_timestamp']) | timestamp_custom('%a %d %b:') }} Stage {{ event['stage'] }} {{
          as_timestamp(event['stage_start_timestamp']) | timestamp_custom('starts at %H:%M') }}
          {{- '\n' -}} {%- endfor -%}
          {%else%}
          None scheduled
          {%endif%}
binary_sensor:
  - platform: template
    sensors:
      loadshedding_active:
        friendly_name: "Loadshedding active"
        device_class: problem
        value_template: >
            {%if state_attr('sensor.eskomsepush','events')|count > 0 %}
                {% if (int(states('sensor.time_till_loadshedding')) <= 0 ) %}
                 True
                {% else %}
                 False
                {% endif %}
            {% else %}
            False
            {% endif %}


